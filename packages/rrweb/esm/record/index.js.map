{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/record/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { snapshot } from \"@partial/rrweb-snapshot\";\nimport initObservers from \"./observer\";\nimport { mirror, on, getWindowWidth, getWindowHeight } from \"../utils\";\nimport {\n  EventType,\n  event,\n  eventWithTime,\n  recordOptions,\n  IncrementalSource,\n  listenerHandler\n} from \"../types\";\n\nfunction wrapEvent(e: event): eventWithTime {\n  return {\n    ...e,\n    timestamp: Date.now()\n  };\n}\n\nfunction record(options: recordOptions = {}): listenerHandler | undefined {\n  const {\n    emit,\n    checkoutEveryNms, //checkout every N millisecond.\n    checkoutEveryNth, //checkout every N times.\n    blockClass = \"rr-block\", //  An element with the class name .rr-block will not be recorded.\n    ignoreClass = \"rr-ignore\", // don't record it's input event.\n    inlineStylesheet = true\n  } = options;\n  // runtime checks for user options\n  if (!emit) {\n    throw new Error(\"emit function is required\");\n  }\n\n  let lastFullSnapshotEvent: eventWithTime;\n  let incrementalSnapshotCount = 0; //incremental snapshot count\n  const wrappedEmit = (e: eventWithTime, isCheckout?: boolean) => {\n    emit(e, isCheckout);\n    if (e.type === EventType.FullSnapshot) {\n      lastFullSnapshotEvent = e;\n      incrementalSnapshotCount = 0;\n    } else if (e.type === EventType.IncrementalSnapshot) {\n      incrementalSnapshotCount++;\n      const exceedCount =\n        checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n      const exceedTime =\n        checkoutEveryNms &&\n        e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n      if (exceedCount || exceedTime) {\n        takeFullSnapshot(true);\n      }\n    }\n  };\n\n  /**\n   * take full snapshot\n   * @param isCheckout\n   */\n  function takeFullSnapshot(isCheckout = false) {\n    wrappedEmit(\n      wrapEvent({\n        type: EventType.Meta,\n        data: {\n          href: window.location.href,\n          width: getWindowWidth(),\n          height: getWindowHeight()\n        }\n      }),\n      isCheckout\n    );\n    const [node, idNodeMap] = snapshot(document, blockClass, inlineStylesheet);\n    if (!node) {\n      return console.warn(\"Failed to snapshot the document\");\n    }\n    mirror.map = idNodeMap;\n    wrappedEmit(\n      wrapEvent({\n        type: EventType.FullSnapshot,\n        data: {\n          node,\n          initialOffset: {\n            left: document.documentElement!.scrollLeft,\n            top: document.documentElement!.scrollTop\n          }\n        }\n      })\n    );\n  }\n\n  try {\n    const handlers: listenerHandler[] = [];\n    handlers.push(\n      on(\"DOMContentLoaded\", () => {\n        wrappedEmit(\n          wrapEvent({\n            type: EventType.DomContentLoaded,\n            data: {}\n          })\n        );\n      })\n    );\n    const init = () => {\n      takeFullSnapshot();\n\n      handlers.push(\n        initObservers({\n          mutationCb: m =>\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.IncrementalSnapshot,\n                data: {\n                  source: IncrementalSource.Mutation,\n                  ...m\n                }\n              })\n            ),\n          mousemoveCb: positions =>\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.IncrementalSnapshot,\n                data: {\n                  source: IncrementalSource.MouseMove,\n                  positions\n                }\n              })\n            ),\n          mouseInteractionCb: d =>\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.IncrementalSnapshot,\n                data: {\n                  source: IncrementalSource.MouseInteraction,\n                  ...d\n                }\n              })\n            ),\n          scrollCb: p =>\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.IncrementalSnapshot,\n                data: {\n                  source: IncrementalSource.Scroll,\n                  ...p\n                }\n              })\n            ),\n          viewportResizeCb: d =>\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.IncrementalSnapshot,\n                data: {\n                  source: IncrementalSource.ViewportResize,\n                  ...d\n                }\n              })\n            ),\n          inputCb: v =>\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.IncrementalSnapshot,\n                data: {\n                  source: IncrementalSource.Input,\n                  ...v\n                }\n              })\n            ),\n          blockClass,\n          ignoreClass,\n          inlineStylesheet\n        })\n      );\n    };\n    if (\n      document.readyState === \"interactive\" ||\n      document.readyState === \"complete\"\n    ) {\n      init();\n    } else {\n      handlers.push(\n        on(\n          \"load\",\n          () => {\n            wrappedEmit(\n              wrapEvent({\n                type: EventType.Load,\n                data: {}\n              })\n            );\n            init();\n          },\n          window\n        )\n      );\n    }\n    return () => {\n      handlers.forEach(h => h());\n    };\n  } catch (error) {\n    // TODO: handle internal error\n    console.warn(error);\n  }\n}\n\nexport default record;\n"]}